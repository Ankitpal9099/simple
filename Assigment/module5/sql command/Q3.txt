CREATE TABLE Salesperson (
    ->   SNo INT PRIMARY KEY,
    ->   SNAME VARCHAR(255),
    ->   CITY VARCHAR(255),
    ->   COMM DECIMAL(4,2)
    -> );
Query OK, 0 rows affected (0.07 sec)

mysql>
mysql> INSERT INTO Salesperson (SNo, SNAME, CITY, COMM) VALUES
    ->   (1001, 'Peel', 'London', 0.12),
    ->   (1002, 'Serres', 'San Jose', 0.13),
    ->   (1004, 'Motika', 'London', 0.11),
    ->   (1007, 'Rafkin', 'Barcelona', 0.15),
    ->   (1003, 'Axelrod', 'New York', 0.1);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from Salesperson;
+------+---------+-----------+------+
| SNo  | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    | 0.12 |
| 1002 | Serres  | San Jose  | 0.13 |
| 1003 | Axelrod | New York  | 0.10 |
| 1004 | Motika  | London    | 0.11 |
| 1007 | Rafkin  | Barcelona | 0.15 |
+------+---------+-----------+------+
5 rows in set (0.00 sec)
 CREATE TABLE Customer (
    ->   CNM INT PRIMARY KEY,
    ->   CNAME VARCHAR(255),
    ->   CITY VARCHAR(255),
    ->   RATING INT,
    ->   SNo INT,
    ->   FOREIGN KEY (SNo) REFERENCES Salesperson(SNo)
    -> );
Query OK, 0 rows affected (0.08 sec)

mysql>
mysql> INSERT INTO Customer (CNM, CNAME, CITY, RATING, SNo) VALUES
    ->   (201, 'Hoffman', 'London', 100, 1001),
    ->   (202, 'Giovanne', 'Roe', 200, 1003),
    ->   (203, 'Liu', 'San Jose', 300, 1002),
    ->   (204, 'Grass', 'Barcelona', 100, 1002),
    ->   (206, 'Clemens', 'London', 300, 1007),
    ->   (207, 'Pereira', 'Roe', 100, 1004);
Query OK, 6 rows affected (0.00 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> select * from Customer;
+-----+----------+-----------+--------+------+
| CNM | CNAME    | CITY      | RATING | SNo  |
+-----+----------+-----------+--------+------+
| 201 | Hoffman  | London    |    100 | 1001 |
| 202 | Giovanne | Roe       |    200 | 1003 |
| 203 | Liu      | San Jose  |    300 | 1002 |
| 204 | Grass    | Barcelona |    100 | 1002 |
| 206 | Clemens  | London    |    300 | 1007 |
| 207 | Pereira  | Roe       |    100 | 1004 |
+-----+----------+-----------+--------+------+
6 rows in set (0.00 sec)

12.Retrieve the below data from above table
 SELECT
    ->   s.SNAME,
    ->   c.CNAME
    -> FROM Salesperson AS s
    -> JOIN Customer AS c
    ->   ON s.SNo = c.SNo;
+---------+----------+
| SNAME   | CNAME    |
+---------+----------+
| Peel    | Hoffman  |
| Serres  | Liu      |
| Serres  | Grass    |
| Axelrod | Giovanne |
| Motika  | Pereira  |
| Rafkin  | Clemens  |
+---------+----------+
6 rows in set (0.00 sec)
13.All orders for more than $1000.
select * from Customer where Sno >1000;
+-----+----------+-----------+--------+------+
| CNM | CNAME    | CITY      | RATING | SNo  |
+-----+----------+-----------+--------+------+
| 201 | Hoffman  | London    |    100 | 1001 |
| 203 | Liu      | San Jose  |    300 | 1002 |
| 204 | Grass    | Barcelona |    100 | 1002 |
| 202 | Giovanne | Roe       |    200 | 1003 |
| 207 | Pereira  | Roe       |    100 | 1004 |
| 206 | Clemens  | London    |    300 | 1007 |
+-----+----------+-----------+--------+------+

14.Names and cities of all salespeople in London with commission above 0.1215.All salespeople either in Barcelona or in London
 SELECT SNAME, CITY FROM Salesperson WHERE CITY='Barcelona' OR CITY='London';
+--------+-----------+
| SNAME  | CITY      |
+--------+-----------+
| Peel   | London    |
| Motika | London    |
| Rafkin | Barcelona |
+--------+-----------+
3 rows in set (0.00 sec)
16.All salespeople with commission between 0.10 and 0.12. (Boundaryvaluesshould be excluded).
 SELECT *
    -> FROM SALESPERSON
    -> WHERE COMM BETWEEN 0.10 AND 0.12;
+------+---------+----------+------+
| SNo  | SNAME   | CITY     | COMM |
+------+---------+----------+------+
| 1001 | Peel    | London   | 0.12 |
| 1003 | Axelrod | New York | 0.10 |
| 1004 | Motika  | London   | 0.11 |
+------+---------+----------+------+
3 rows in set (0.05 sec)
17.All customers excluding those with rating <= 100 unless they are located inRome
 SELECT *
    -> FROM CUSTOMER
    -> WHERE RATING > 100
    -> UNION
    -> SELECT *
    -> FROM CUSTOMER
    -> WHERE RATING <= 100 AND CITY = 'Rome';
+-----+----------+----------+--------+------+
| CNM | CNAME    | CITY     | RATING | SNo  |
+-----+----------+----------+--------+------+
| 202 | Giovanne | Roe      |    200 | 1003 |
| 203 | Liu      | San Jose |    300 | 1002 |
| 206 | Clemens  | London   |    300 | 1007 |
+-----+----------+----------+--------+------+
3 rows in set (0.01 sec)
18. Write a SQL statement that displays all the information about all salespeople
SELECT * FROM SALESPERSON;
+------+---------+-----------+------+
| SNo  | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    | 0.12 |
| 1002 | Serres  | San Jose  | 0.13 |
| 1003 | Axelrod | New York  | 0.10 |
| 1004 | Motika  | London    | 0.11 |
| 1007 | Rafkin  | Barcelona | 0.15 |
+------+---------+-----------+------+
5 rows in set (0.00 sec)

19. From the following table, write a SQL query to find orders that are delivered by a salesperson with ID. 5001. Return ord_no, ord_date,purch_amt.

     SELECT ord_no, ord_date, purch_amt
    -> FROM orders
    -> WHERE salesman_id = 5001;
+--------+------------+-----------+
| ord_no | ord_date   | purch_amt |
+--------+------------+-----------+
|  70002 | 2012-10-05 |        65 |
|  70005 | 2012-07-27 |      2401 |
|  70008 | 2012-09-10 |      5760 |
+--------+------------+-----------+
3 rows in set (0.00 sec)
***************************************************************************************************************************************************
 CREATE TABLE orders (
    ->   ord_no INT,
    ->   purch_amt DECIMAL,
    ->   ord_date DATE,
    ->   customer_id INT,
    ->   salesman_id INT
    -> );
Query OK, 0 rows affected (0.08 sec)

mysql>
mysql> INSERT INTO orders (ord_no, purch_amt, ord_date, customer_id, salesman_id) VALUES
    ->   (70001, 150.5, '2012-10-05', 3005, 5002),
    ->   (70009, 270.65, '2012-09-10', 3001, 5005),
    ->   (70002, 65.26, '2012-10-05', 3002, 5001),
    ->   (70004, 110.5, '2012-08-17', 3009, 5003),
    ->   (70007, 948.5, '2012-09-10', 3005, 5002),
    ->   (70005, 2400.6, '2012-07-27', 3007, 5001),
    ->   (70008, 5760, '2012-09-10', 3002, 5001),
    ->   (70010, 1983.43, '2012-10-10', 3004, 5006),
    ->   (70003, 2480.4, '2012-10-10', 3009, 5003),
    ->   (70012, 250.45, '2012-06-27', 3008, 5002);
 select * from orders;
+--------+-----------+------------+-------------+-------------+
| ord_no | purch_amt | ord_date   | customer_id | salesman_id |
+--------+-----------+------------+-------------+-------------+
|  70001 |       151 | 2012-10-05 |        3005 |        5002 |
|  70009 |       271 | 2012-09-10 |        3001 |        5005 |
|  70002 |        65 | 2012-10-05 |        3002 |        5001 |
|  70004 |       111 | 2012-08-17 |        3009 |        5003 |
|  70007 |       949 | 2012-09-10 |        3005 |        5002 |
|  70005 |      2401 | 2012-07-27 |        3007 |        5001 |
|  70008 |      5760 | 2012-09-10 |        3002 |        5001 |
|  70010 |      1983 | 2012-10-10 |        3004 |        5006 |
|  70003 |      2480 | 2012-10-10 |        3009 |        5003 |
|  70012 |       250 | 2012-06-27 |        3008 |        5002 |
|  70011 |        75 | 2012-08-17 |        3003 |           5 |
+--------+-----------+------------+-------------+-------------+
11 rows in set (0.00 sec)



****************************************************************************************************************************************************

 CREATE TABLE item_mast (
    ->   PRO_ID INT,
    ->   PRO_NAME VARCHAR(255),
    ->   PRO_PRICE DECIMAL(10, 2),
    ->   PRO_COM INT
    -> );
Query OK, 0 rows affected (0.10 sec)

mysql>
mysql> INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES
    -> (101, 'Mother Board', 3200.00, 15),
    -> (102, 'Key Board', 450.00, 16),
    -> (103, 'ZIP drive', 250.00, 14),
    -> (104, 'Speaker', 550.00, 16),
    -> (105, 'Monitor', 5000.00, 11),
    -> (106, 'DVD drive', 900.00, 12),
    -> (107, 'CD drive', 800.00, 12),
    -> (108, 'Printer', 2600.00, 13),
    -> (109, 'Refill cartridge', 350.00, 13),
    -> (110, 'Mouse', 250.00, 12);
Query OK, 10 rows affected (0.02 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql> select * from item_mast;
+--------+------------------+-----------+---------+
| PRO_ID | PRO_NAME         | PRO_PRICE | PRO_COM |
+--------+------------------+-----------+---------+
|    101 | Mother Board     |   3200.00 |      15 |
|    102 | Key Board        |    450.00 |      16 |
|    103 | ZIP drive        |    250.00 |      14 |
|    104 | Speaker          |    550.00 |      16 |
|    105 | Monitor          |   5000.00 |      11 |
|    106 | DVD drive        |    900.00 |      12 |
|    107 | CD drive         |    800.00 |      12 |
|    108 | Printer          |   2600.00 |      13 |
|    109 | Refill cartridge |    350.00 |      13 |
|    110 | Mouse            |    250.00 |      12 |
+--------+------------------+-----------+---------+
10 rows in set (0.00 sec)



20. From the following table, write a SQL query to select a range of products whose price is in the range Rs.200 to Rs.600. Begin and end values are included. Return pro_id, pro_name, pro_price, and pro_com.
SELECT pro_id, pro_name, pro_price, pro_com
    -> FROM item_mast
    -> WHERE pro_price BETWEEN 200 AND 600;
+--------+------------------+-----------+---------+
| pro_id | pro_name         | pro_price | pro_com |
+--------+------------------+-----------+---------+
|    102 | Key Board        |    450.00 |      16 |
|    103 | ZIP drive        |    250.00 |      14 |
|    104 | Speaker          |    550.00 |      16 |
|    109 | Refill cartridge |    350.00 |      13 |
|    110 | Mouse            |    250.00 |      12 |
+--------+------------------+-----------+---------+
5 rows in set (0.00 sec)

21. From the following table, write a SQL query to calculate the average price for a manufacturer code of 16. Return avg.
 SELECT AVG(PRO_PRICE) AS avg
    -> FROM item_mast
    -> WHERE PRO_COM = 16;
+------------+
| avg        |
+------------+
| 500.000000 |
+------------+
1 row in set (0.05 sec)

22. From the following table, write a SQL query to display the pro_name as 'Item Name' and pro_priceas 'Price in Rs.'
SELECT pro_name AS 'Item Name', pro_price AS 'Price in Rs.'
    -> FROM item_mast;
+------------------+--------------+
| Item Name        | Price in Rs. |
+------------------+--------------+
| Mother Board     |      3200.00 |
| Key Board        |       450.00 |
| ZIP drive        |       250.00 |
| Speaker          |       550.00 |
| Monitor          |      5000.00 |
| DVD drive        |       900.00 |
| CD drive         |       800.00 |
| Printer          |      2600.00 |
| Refill cartridge |       350.00 |
| Mouse            |       250.00 |
+------------------+--------------+
10 rows in set (0.00 sec)

23. From the following table, write a SQL query to find the items whose prices are higher than or equal to $250. Order the result by product price in descending, then product name in ascending. Return pro_name and
pro_price.

 SELECT pro_name, pro_price
    -> FROM item_mast
    -> WHERE pro_price >= 250
    -> ORDER BY pro_price DESC, pro_name ASC;
+------------------+-----------+
| pro_name         | pro_price |
+------------------+-----------+
| Monitor          |   5000.00 |
| Mother Board     |   3200.00 |
| Printer          |   2600.00 |
| DVD drive        |    900.00 |
| CD drive         |    800.00 |
| Speaker          |    550.00 |
| Key Board        |    450.00 |
| Refill cartridge |    350.00 |
| Mouse            |    250.00 |
| ZIP drive        |    250.00 |
+------------------+-----------+
10 rows in set (0.06 sec)

24. From the following table, write a SQL query to calculate average price of the items for each company. Return average price and company code.














